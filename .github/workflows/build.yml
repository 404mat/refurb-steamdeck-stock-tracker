name: Build Executables
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual trigger
    inputs:
      create_release:
        description: 'Create a GitHub release'
        required: false
        default: false
        type: boolean
      release_tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: false
        default: ''
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            asset_name: steam-deck-notifier-linux
            executable_extension: ''
          - os: windows-latest
            asset_name: steam-deck-notifier-windows
            executable_extension: '.exe'
          - os: macos-latest
            asset_name: steam-deck-notifier-macos
            executable_extension: ''
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller requests discord-webhook
        
    - name: Build executable
      run: |
        pyinstaller --onefile --name steam-deck-notifier steam_deck_checker.py
        
    - name: Rename executable for release
      if: github.event.inputs.create_release == 'true'
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          mv dist/steam-deck-notifier.exe dist/${{ matrix.asset_name }}.exe
        else
          mv dist/steam-deck-notifier dist/${{ matrix.asset_name }}
        fi
        
    - name: Upload artifacts (always)
      uses: actions/upload-artifact@v3
      with:
        name: steam-deck-notifier-${{ matrix.os }}
        path: dist/
        
    - name: Upload release assets
      if: github.event.inputs.create_release == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: release-assets
        path: dist/${{ matrix.asset_name }}${{ matrix.executable_extension }}

  release:
    if: github.event.inputs.create_release == 'true'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Download all release assets
      uses: actions/download-artifact@v3
      with:
        name: release-assets
        path: ./release-assets/
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.release_tag || format('v{0}', github.run_number) }}
        release_name: Release ${{ github.event.inputs.release_tag || format('v{0}', github.run_number) }}
        draft: false
        prerelease: false
        body: |
          Refurbished Steam Deck Notifier Release
          
          ## Downloads
          - **Linux**: steam-deck-notifier-linux
          - **Windows**: steam-deck-notifier-windows.exe  
          - **macOS**: steam-deck-notifier-macos
          
          Built from commit: ${{ github.sha }}
        
    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-assets/steam-deck-notifier-linux
        asset_name: steam-deck-notifier-linux
        asset_content_type: application/octet-stream
        
    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-assets/steam-deck-notifier-windows.exe
        asset_name: steam-deck-notifier-windows.exe
        asset_content_type: application/octet-stream
        
    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-assets/steam-deck-notifier-macos
        asset_name: steam-deck-notifier-macos
        asset_content_type: application/octet-stream
